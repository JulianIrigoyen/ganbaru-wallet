WalletsSystem {
  akka {
    coordinated-shutdown.exit-jvm = off
    log-config-on-start = true

    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = DEBUG

    persistence {
        journal {
          plugin = "akka.persistence.journal.leveldb"
          auto-start-journals = ["akka.persistence.journal.leveldb"]
          leveldb.dir = "target/journal"
        }
        snapshot-store {
          plugin = "akka.persistence.snapshot-store.local"
          auto-start-snapshot-stores = ["akka.persistence.snapshot-store.local"]
          local.dir = "target/snapshots"
        }
      }

    actor {
      provider = cluster
      warn-about-java-serializer-usage = on
      allow-java-serialization = off

      serializers {
        kryo = "com.twitter.chill.akka.AkkaSerializer"
      }

      serialization-bindings {
        "java.io.Serializable" = kryo
        "java.lang.Throwable" = kryo
      }
    }
    remote {
      log-remote-lifecycle-events = off

      artery {
        enabled = on
        transport = tcp
        canonical.hostname = "127.0.0.1"
        canonical.port = 2551
        canonical.port = ${?akka.remote.port}

        advanced.system-message-buffer-size = 200000
      }
    }

    cluster {
      log-info = off
      use-dispatcher = cluster-dispatcher
      min-nr-of-members = 1

      failure-detector {
        heartbeat-interval = 4 s
        threshold = 12.0
        max-sample-size = 1000
        min-std-deviation = 400 ms
        acceptable-heartbeat-pause = 9 s
        expected-response-after = 2 s
      }
      auto-discovery = off
      seed-nodes = ["akka://WalletsSystem@127.0.0.1:2551"]

      shutdown-after-unsuccessful-join-seed-nodes = 30s
    }

    io.dns.resolver = async-dns

    management {
      port = 20000
      cluster.bootstrap {
        new-cluster-enabled = on
        contact-point-discovery {
          port-name = "management"
          protocol = "tcp"
          service-name = "ganbaru-wallet-service"
          discovery-method = akka-dns
        }
      }

      http {
        bind-hostname = 0.0.0.0
        port = 20000
        bind-port = 20000

        route-providers = [
          "akka.management.cluster.bootstrap.ClusterBootstrap",
          "akka.management.cluster.ClusterHttpManagementRouteProvider",
          "akka.management.HealthCheckRoutes",
        ]
      }
    }

    http.client.parsing.illegal-header-warnings = off
  }

  cluster-dispatcher {
    type = "Dispatcher"
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 2
      parallelism-max = 4
    }
  }
}
WalletsSystemForTestSuite {
  akka {
    actor.allow-java-serialization = on

    persistence {
      journal {
        plugin = "akka.persistence.journal.inmem"
        inmem.test-serialization = on
      }
      snapshot {
        plugin = "akka.persistence.snapshot-store.local"
        local.dir = "target/snapshot-${UUID.randomUUID().toString}"
      }
    }
  }
}

